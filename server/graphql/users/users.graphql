type Query {
  Users: [User]
  User(conditions: UserInput!): UserResult
  SocialUser(socialId: ID!, provider: String!): UserResult
}

# make a social json column would be better than [social]id.
type Mutation {
  AddUser(
    display_name: String!
    email: String!
    password: String!
  ): UserInputResult
  SignIn(email: String!, password: String!): UserInputResult
  SignUpGoogle(credential: String!): UserInputResult
  SignInGoogle(credential: String!): UserInputResult
}

type User {
  id: ID
  googleid: ID
  display_name: String!
  email: String!
  password: String
  created_at: Timestamp!
  updated_at: Timestamp
}

type UserError implements Error {
  code: String!
  message: String
}

union UserResult = User | UserError

input UserInput {
  id: ID
  googleid: ID
  display_name: String
  email: String
  password: String
  created_at: Timestamp
  updated_at: Timestamp
}

type JsonWebToken {
  access_token: String!
  exp: String!
}

union UserInputResult = JsonWebToken | UserError
